import { type EmbeddingFunction, type Table, type VectorIndexParams, type Connection, type ConnectionOptions } from '../index';
import { Query } from '../query';
import { type Table as ArrowTable } from 'apache-arrow';
import { HttpLancedbClient } from './client';
/**
 * Remote connection.
 */
export declare class RemoteConnection implements Connection {
    private readonly _client;
    private readonly _dbName;
    constructor(opts: ConnectionOptions);
    get uri(): string;
    tableNames(): Promise<string[]>;
    openTable(name: string): Promise<Table>;
    openTable<T>(name: string, embeddings: EmbeddingFunction<T>): Promise<Table<T>>;
    createTable(name: string, data: Array<Record<string, unknown>>): Promise<Table>;
    createTable<T>(name: string, data: Array<Record<string, unknown>>, embeddings: EmbeddingFunction<T>): Promise<Table<T>>;
    createTableArrow(name: string, table: ArrowTable): Promise<Table>;
    dropTable(name: string): Promise<void>;
}
export declare class RemoteQuery<T = number[]> extends Query<T> {
    private readonly _client;
    private readonly _name;
    constructor(query: T, _client: HttpLancedbClient, _name: string, embeddings?: EmbeddingFunction<T>);
    execute<T = Record<string, unknown>>(): Promise<T[]>;
}
export declare class RemoteTable<T = number[]> implements Table<T> {
    private readonly _client;
    private readonly _embeddings?;
    private readonly _name;
    constructor(client: HttpLancedbClient, name: string);
    constructor(client: HttpLancedbClient, name: string, embeddings: EmbeddingFunction<T>);
    get name(): string;
    search(query: T): Query<T>;
    add(data: Array<Record<string, unknown>>): Promise<number>;
    overwrite(data: Array<Record<string, unknown>>): Promise<number>;
    createIndex(indexParams: VectorIndexParams): Promise<any>;
    countRows(): Promise<number>;
    delete(filter: string): Promise<void>;
}
