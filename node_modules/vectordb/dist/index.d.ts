import { type Table as ArrowTable } from 'apache-arrow';
import type { EmbeddingFunction } from './embedding/embedding_function';
import { Query } from './query';
export { Query };
export type { EmbeddingFunction };
export { OpenAIEmbeddingFunction } from './embedding/openai';
export interface AwsCredentials {
    accessKeyId: string;
    secretKey: string;
    sessionToken?: string;
}
export interface ConnectionOptions {
    uri: string;
    awsCredentials?: AwsCredentials;
    apiKey?: string;
    region?: string;
    hostOverride?: string;
}
/**
 * Connect to a LanceDB instance at the given URI
 * @param uri The uri of the database.
 */
export declare function connect(uri: string): Promise<Connection>;
export declare function connect(opts: Partial<ConnectionOptions>): Promise<Connection>;
/**
 * A LanceDB Connection that allows you to open tables and create new ones.
 *
 * Connection could be local against filesystem or remote against a server.
 */
export interface Connection {
    uri: string;
    tableNames(): Promise<string[]>;
    /**
     * Open a table in the database.
     *
     * @param name The name of the table.
     * @param embeddings An embedding function to use on this table
     */
    openTable<T>(name: string, embeddings?: EmbeddingFunction<T>): Promise<Table<T>>;
    /**
     * Creates a new Table and initialize it with new data.
     *
     * @param {string} name - The name of the table.
     * @param data - Non-empty Array of Records to be inserted into the table
     */
    createTable(name: string, data: Array<Record<string, unknown>>): Promise<Table>;
    /**
     * Creates a new Table and initialize it with new data.
     *
     * @param {string} name - The name of the table.
     * @param data - Non-empty Array of Records to be inserted into the table
     * @param {WriteOptions} options - The write options to use when creating the table.
     */
    createTable(name: string, data: Array<Record<string, unknown>>, options: WriteOptions): Promise<Table>;
    /**
     * Creates a new Table and initialize it with new data.
     *
     * @param {string} name - The name of the table.
     * @param data - Non-empty Array of Records to be inserted into the table
     * @param {EmbeddingFunction} embeddings - An embedding function to use on this table
     */
    createTable<T>(name: string, data: Array<Record<string, unknown>>, embeddings: EmbeddingFunction<T>): Promise<Table<T>>;
    /**
     * Creates a new Table and initialize it with new data.
     *
     * @param {string} name - The name of the table.
     * @param data - Non-empty Array of Records to be inserted into the table
     * @param {EmbeddingFunction} embeddings - An embedding function to use on this table
     * @param {WriteOptions} options - The write options to use when creating the table.
     */
    createTable<T>(name: string, data: Array<Record<string, unknown>>, embeddings: EmbeddingFunction<T>, options: WriteOptions): Promise<Table<T>>;
    createTableArrow(name: string, table: ArrowTable): Promise<Table>;
    /**
     * Drop an existing table.
     * @param name The name of the table to drop.
     */
    dropTable(name: string): Promise<void>;
}
/**
 * A LanceDB Table is the collection of Records. Each Record has one or more vector fields.
 */
export interface Table<T = number[]> {
    name: string;
    /**
     * Creates a search query to find the nearest neighbors of the given search term
     * @param query The query search term
     */
    search: (query: T) => Query<T>;
    /**
     * Insert records into this Table.
     *
     * @param data Records to be inserted into the Table
     * @return The number of rows added to the table
     */
    add: (data: Array<Record<string, unknown>>) => Promise<number>;
    /**
     * Insert records into this Table, replacing its contents.
     *
     * @param data Records to be inserted into the Table
     * @return The number of rows added to the table
     */
    overwrite: (data: Array<Record<string, unknown>>) => Promise<number>;
    /**
     * Create an ANN index on this Table vector index.
     *
     * @param indexParams The parameters of this Index, @see VectorIndexParams.
     */
    createIndex: (indexParams: VectorIndexParams) => Promise<any>;
    /**
     * Returns the number of rows in this table.
     */
    countRows: () => Promise<number>;
    /**
     * Delete rows from this table.
     *
     * This can be used to delete a single row, many rows, all rows, or
     * sometimes no rows (if your predicate matches nothing).
     *
     * @param filter  A filter in the same format used by a sql WHERE clause. The
     *                filter must not be empty.
     *
     * @examples
     *
     * ```ts
     * const con = await lancedb.connect("./.lancedb")
     * const data = [
     *    {id: 1, vector: [1, 2]},
     *    {id: 2, vector: [3, 4]},
     *    {id: 3, vector: [5, 6]},
     * ];
     * const tbl = await con.createTable("my_table", data)
     * await tbl.delete("id = 2")
     * await tbl.countRows() // Returns 2
     * ```
     *
     * If you have a list of values to delete, you can combine them into a
     * stringified list and use the `IN` operator:
     *
     * ```ts
     * const to_remove = [1, 5];
     * await tbl.delete(`id IN (${to_remove.join(",")})`)
     * await tbl.countRows() // Returns 1
     * ```
     */
    delete: (filter: string) => Promise<void>;
}
/**
 * A connection to a LanceDB database.
 */
export declare class LocalConnection implements Connection {
    private readonly _options;
    private readonly _db;
    constructor(db: any, options: ConnectionOptions);
    get uri(): string;
    /**
     * Get the names of all tables in the database.
     */
    tableNames(): Promise<string[]>;
    /**
     * Open a table in the database.
     *
     * @param name The name of the table.
     */
    openTable(name: string): Promise<Table>;
    /**
     * Open a table in the database.
     *
     * @param name The name of the table.
     * @param embeddings An embedding function to use on this Table
     */
    openTable<T>(name: string, embeddings: EmbeddingFunction<T>): Promise<Table<T>>;
    openTable<T>(name: string, embeddings?: EmbeddingFunction<T>): Promise<Table<T>>;
    createTable<T>(name: string, data: Array<Record<string, unknown>>, optsOrEmbedding?: WriteOptions | EmbeddingFunction<T>, opt?: WriteOptions): Promise<Table<T>>;
    createTableArrow(name: string, table: ArrowTable): Promise<Table>;
    /**
     * Drop an existing table.
     * @param name The name of the table to drop.
     */
    dropTable(name: string): Promise<void>;
}
export declare class LocalTable<T = number[]> implements Table<T> {
    private readonly _tbl;
    private readonly _name;
    private readonly _embeddings?;
    private readonly _options;
    constructor(tbl: any, name: string, options: ConnectionOptions);
    /**
     * @param tbl
     * @param name
     * @param options
     * @param embeddings An embedding function to use when interacting with this table
     */
    constructor(tbl: any, name: string, options: ConnectionOptions, embeddings: EmbeddingFunction<T>);
    get name(): string;
    /**
     * Creates a search query to find the nearest neighbors of the given search term
     * @param query The query search term
     */
    search(query: T): Query<T>;
    /**
     * Insert records into this Table.
     *
     * @param data Records to be inserted into the Table
     * @return The number of rows added to the table
     */
    add(data: Array<Record<string, unknown>>): Promise<number>;
    /**
     * Insert records into this Table, replacing its contents.
     *
     * @param data Records to be inserted into the Table
     * @return The number of rows added to the table
     */
    overwrite(data: Array<Record<string, unknown>>): Promise<number>;
    /**
     * Create an ANN index on this Table vector index.
     *
     * @param indexParams The parameters of this Index, @see VectorIndexParams.
     */
    createIndex(indexParams: VectorIndexParams): Promise<any>;
    /**
     * Returns the number of rows in this table.
     */
    countRows(): Promise<number>;
    /**
     * Delete rows from this table.
     *
     * @param filter A filter in the same format used by a sql WHERE clause.
     */
    delete(filter: string): Promise<void>;
}
export interface IvfPQIndexConfig {
    /**
     * The column to be indexed
     */
    column?: string;
    /**
     * A unique name for the index
     */
    index_name?: string;
    /**
     * Metric type, L2 or Cosine
     */
    metric_type?: MetricType;
    /**
     * The number of partitions this index
     */
    num_partitions?: number;
    /**
     * The max number of iterations for kmeans training.
     */
    max_iters?: number;
    /**
     * Train as optimized product quantization.
     */
    use_opq?: boolean;
    /**
     * Number of subvectors to build PQ code
     */
    num_sub_vectors?: number;
    /**
     * The number of bits to present one PQ centroid.
     */
    num_bits?: number;
    /**
     * Max number of iterations to train OPQ, if `use_opq` is true.
     */
    max_opq_iters?: number;
    /**
     * Replace an existing index with the same name if it exists.
     */
    replace?: boolean;
    type: 'ivf_pq';
}
export type VectorIndexParams = IvfPQIndexConfig;
/**
 * Write mode for writing a table.
 */
export declare enum WriteMode {
    /** Create a new {@link Table}. */
    Create = "create",
    /** Overwrite the existing {@link Table} if presented. */
    Overwrite = "overwrite",
    /** Append new data to the table. */
    Append = "append"
}
/**
 * Write options when creating a Table.
 */
export interface WriteOptions {
    /** A {@link WriteMode} to use on this operation */
    writeMode?: WriteMode;
}
export declare class DefaultWriteOptions implements WriteOptions {
    writeMode: WriteMode;
}
export declare function isWriteOptions(value: any): value is WriteOptions;
/**
 * Distance metrics type.
 */
export declare enum MetricType {
    /**
     * Euclidean distance
     */
    L2 = "l2",
    /**
     * Cosine distance
     */
    Cosine = "cosine",
    /**
     * Dot product
     */
    Dot = "dot"
}
